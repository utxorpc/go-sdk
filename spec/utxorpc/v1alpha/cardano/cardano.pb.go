// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: utxorpc/v1alpha/cardano/cardano.proto

package cardano

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Purpose of the redeemer in a transaction.
type RedeemerPurpose int32

const (
	RedeemerPurpose_REDEEMER_PURPOSE_UNSPECIFIED RedeemerPurpose = 0
	RedeemerPurpose_REDEEMER_PURPOSE_SPEND       RedeemerPurpose = 1
	RedeemerPurpose_REDEEMER_PURPOSE_MINT        RedeemerPurpose = 2
	RedeemerPurpose_REDEEMER_PURPOSE_CERT        RedeemerPurpose = 3
	RedeemerPurpose_REDEEMER_PURPOSE_REWARD      RedeemerPurpose = 4
)

// Enum value maps for RedeemerPurpose.
var (
	RedeemerPurpose_name = map[int32]string{
		0: "REDEEMER_PURPOSE_UNSPECIFIED",
		1: "REDEEMER_PURPOSE_SPEND",
		2: "REDEEMER_PURPOSE_MINT",
		3: "REDEEMER_PURPOSE_CERT",
		4: "REDEEMER_PURPOSE_REWARD",
	}
	RedeemerPurpose_value = map[string]int32{
		"REDEEMER_PURPOSE_UNSPECIFIED": 0,
		"REDEEMER_PURPOSE_SPEND":       1,
		"REDEEMER_PURPOSE_MINT":        2,
		"REDEEMER_PURPOSE_CERT":        3,
		"REDEEMER_PURPOSE_REWARD":      4,
	}
)

func (x RedeemerPurpose) Enum() *RedeemerPurpose {
	p := new(RedeemerPurpose)
	*p = x
	return p
}

func (x RedeemerPurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedeemerPurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes[0].Descriptor()
}

func (RedeemerPurpose) Type() protoreflect.EnumType {
	return &file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes[0]
}

func (x RedeemerPurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedeemerPurpose.Descriptor instead.
func (RedeemerPurpose) EnumDescriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{0}
}

type MirSource int32

const (
	MirSource_MIR_SOURCE_UNSPECIFIED MirSource = 0
	MirSource_MIR_SOURCE_RESERVES    MirSource = 1
	MirSource_MIR_SOURCE_TREASURY    MirSource = 2
)

// Enum value maps for MirSource.
var (
	MirSource_name = map[int32]string{
		0: "MIR_SOURCE_UNSPECIFIED",
		1: "MIR_SOURCE_RESERVES",
		2: "MIR_SOURCE_TREASURY",
	}
	MirSource_value = map[string]int32{
		"MIR_SOURCE_UNSPECIFIED": 0,
		"MIR_SOURCE_RESERVES":    1,
		"MIR_SOURCE_TREASURY":    2,
	}
)

func (x MirSource) Enum() *MirSource {
	p := new(MirSource)
	*p = x
	return p
}

func (x MirSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MirSource) Descriptor() protoreflect.EnumDescriptor {
	return file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes[1].Descriptor()
}

func (MirSource) Type() protoreflect.EnumType {
	return &file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes[1]
}

func (x MirSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MirSource.Descriptor instead.
func (MirSource) EnumDescriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{1}
}

// Redeemer information for a Plutus script.
type Redeemer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purpose RedeemerPurpose `protobuf:"varint,1,opt,name=purpose,proto3,enum=utxorpc.v1alpha.cardano.RedeemerPurpose" json:"purpose,omitempty"` // Purpose of the redeemer.
	Datum   *PlutusData     `protobuf:"bytes,2,opt,name=datum,proto3" json:"datum,omitempty"`                                                   // Plutus data associated with the redeemer.
}

func (x *Redeemer) Reset() {
	*x = Redeemer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redeemer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redeemer) ProtoMessage() {}

func (x *Redeemer) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redeemer.ProtoReflect.Descriptor instead.
func (*Redeemer) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{0}
}

func (x *Redeemer) GetPurpose() RedeemerPurpose {
	if x != nil {
		return x.Purpose
	}
	return RedeemerPurpose_REDEEMER_PURPOSE_UNSPECIFIED
}

func (x *Redeemer) GetDatum() *PlutusData {
	if x != nil {
		return x.Datum
	}
	return nil
}

// Represents a transaction input in the Cardano blockchain.
type TxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash      []byte    `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                 // Hash of the previous transaction.
	OutputIndex uint32    `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"` // Index of the output in the previous transaction.
	AsOutput    *TxOutput `protobuf:"bytes,3,opt,name=as_output,json=asOutput,proto3" json:"as_output,omitempty"`           // Content of the input represented as output of the related transaction
	Redeemer    *Redeemer `protobuf:"bytes,4,opt,name=redeemer,proto3" json:"redeemer,omitempty"`                           // Redeemer for the Plutus script.
}

func (x *TxInput) Reset() {
	*x = TxInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInput) ProtoMessage() {}

func (x *TxInput) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInput.ProtoReflect.Descriptor instead.
func (*TxInput) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{1}
}

func (x *TxInput) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *TxInput) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *TxInput) GetAsOutput() *TxOutput {
	if x != nil {
		return x.AsOutput
	}
	return nil
}

func (x *TxInput) GetRedeemer() *Redeemer {
	if x != nil {
		return x.Redeemer
	}
	return nil
}

// Represents a transaction output in the Cardano blockchain.
type TxOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   []byte        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                      // Address receiving the output.
	Coin      uint64        `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`                           // Amount of ADA in the output.
	Assets    []*Multiasset `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`                        // Additional native (non-ADA) assets in the output.
	Datum     *PlutusData   `protobuf:"bytes,4,opt,name=datum,proto3" json:"datum,omitempty"`                          // Plutus data associated with the output.
	DatumHash []byte        `protobuf:"bytes,5,opt,name=datum_hash,json=datumHash,proto3" json:"datum_hash,omitempty"` // Hash of the Plutus data.
	Script    *Script       `protobuf:"bytes,6,opt,name=script,proto3" json:"script,omitempty"`                        // Script associated with the output.
}

func (x *TxOutput) Reset() {
	*x = TxOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutput) ProtoMessage() {}

func (x *TxOutput) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutput.ProtoReflect.Descriptor instead.
func (*TxOutput) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{2}
}

func (x *TxOutput) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TxOutput) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *TxOutput) GetAssets() []*Multiasset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *TxOutput) GetDatum() *PlutusData {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *TxOutput) GetDatumHash() []byte {
	if x != nil {
		return x.DatumHash
	}
	return nil
}

func (x *TxOutput) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

// Represents a custom asset in the Cardano blockchain.
type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // Name of the custom asset.
	OutputCoin uint64 `protobuf:"varint,2,opt,name=output_coin,json=outputCoin,proto3" json:"output_coin,omitempty"` // Quantity of the custom asset in case of an output.
	MintCoin   int64  `protobuf:"varint,3,opt,name=mint_coin,json=mintCoin,proto3" json:"mint_coin,omitempty"`       // Quantity of the custom asset in case of a mint.
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{3}
}

func (x *Asset) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Asset) GetOutputCoin() uint64 {
	if x != nil {
		return x.OutputCoin
	}
	return 0
}

func (x *Asset) GetMintCoin() int64 {
	if x != nil {
		return x.MintCoin
	}
	return 0
}

// Represents a multi-asset group in the Cardano blockchain.
type Multiasset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId []byte   `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"` // Policy ID governing the custom assets.
	Assets   []*Asset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`                     // List of custom assets.
}

func (x *Multiasset) Reset() {
	*x = Multiasset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multiasset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multiasset) ProtoMessage() {}

func (x *Multiasset) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multiasset.ProtoReflect.Descriptor instead.
func (*Multiasset) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{4}
}

func (x *Multiasset) GetPolicyId() []byte {
	if x != nil {
		return x.PolicyId
	}
	return nil
}

func (x *Multiasset) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

// Represents the validity interval of a transaction.
type TxValidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"` // Start of the validity interval.
	Ttl   uint64 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`     // End of the validity interval (TTL: Time to Live).
}

func (x *TxValidity) Reset() {
	*x = TxValidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxValidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxValidity) ProtoMessage() {}

func (x *TxValidity) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxValidity.ProtoReflect.Descriptor instead.
func (*TxValidity) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{5}
}

func (x *TxValidity) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TxValidity) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// Represents the collateral information for a transaction.
type Collateral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collateral       []*TxInput `protobuf:"bytes,1,rep,name=collateral,proto3" json:"collateral,omitempty"`                                     // Collateral inputs for the transaction.
	CollateralReturn *TxOutput  `protobuf:"bytes,2,opt,name=collateral_return,json=collateralReturn,proto3" json:"collateral_return,omitempty"` // Collateral return in case of script failure.
	TotalCollateral  uint64     `protobuf:"varint,3,opt,name=total_collateral,json=totalCollateral,proto3" json:"total_collateral,omitempty"`   // Total amount of collateral.
}

func (x *Collateral) Reset() {
	*x = Collateral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collateral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collateral) ProtoMessage() {}

func (x *Collateral) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collateral.ProtoReflect.Descriptor instead.
func (*Collateral) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{6}
}

func (x *Collateral) GetCollateral() []*TxInput {
	if x != nil {
		return x.Collateral
	}
	return nil
}

func (x *Collateral) GetCollateralReturn() *TxOutput {
	if x != nil {
		return x.CollateralReturn
	}
	return nil
}

func (x *Collateral) GetTotalCollateral() uint64 {
	if x != nil {
		return x.TotalCollateral
	}
	return 0
}

// Represents a withdrawal from a reward account.
type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardAccount []byte `protobuf:"bytes,1,opt,name=reward_account,json=rewardAccount,proto3" json:"reward_account,omitempty"` // Address of the reward account.
	Coin          uint64 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`                                       // Amount of ADA withdrawn.
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{7}
}

func (x *Withdrawal) GetRewardAccount() []byte {
	if x != nil {
		return x.RewardAccount
	}
	return nil
}

func (x *Withdrawal) GetCoin() uint64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

// Represents a set of witnesses that validate a transaction
type WitnessSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vkeywitness  []*VKeyWitness `protobuf:"bytes,1,rep,name=vkeywitness,proto3" json:"vkeywitness,omitempty"`                       // List of VKey witnesses.
	Script       []*Script      `protobuf:"bytes,2,rep,name=script,proto3" json:"script,omitempty"`                                 // List of scripts.
	PlutusDatums []*PlutusData  `protobuf:"bytes,3,rep,name=plutus_datums,json=plutusDatums,proto3" json:"plutus_datums,omitempty"` // List of Plutus data elements associated with the transaction.
}

func (x *WitnessSet) Reset() {
	*x = WitnessSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WitnessSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitnessSet) ProtoMessage() {}

func (x *WitnessSet) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitnessSet.ProtoReflect.Descriptor instead.
func (*WitnessSet) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{8}
}

func (x *WitnessSet) GetVkeywitness() []*VKeyWitness {
	if x != nil {
		return x.Vkeywitness
	}
	return nil
}

func (x *WitnessSet) GetScript() []*Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *WitnessSet) GetPlutusDatums() []*PlutusData {
	if x != nil {
		return x.PlutusDatums
	}
	return nil
}

// Auxiliary data not directly tied to the validation process
type AuxData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []*Metadata `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"` // List of auxiliary metadata elements.
	Scripts  []*Script   `protobuf:"bytes,2,rep,name=scripts,proto3" json:"scripts,omitempty"`   // List of auxiliary scripts.
}

func (x *AuxData) Reset() {
	*x = AuxData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuxData) ProtoMessage() {}

func (x *AuxData) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuxData.ProtoReflect.Descriptor instead.
func (*AuxData) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{9}
}

func (x *AuxData) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AuxData) GetScripts() []*Script {
	if x != nil {
		return x.Scripts
	}
	return nil
}

// Represents a transaction in the Cardano blockchain.
type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs          []*TxInput     `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`                                          // List of transaction inputs
	Outputs         []*TxOutput    `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`                                        // List of transaction outputs
	Certificates    []*Certificate `protobuf:"bytes,3,rep,name=certificates,proto3" json:"certificates,omitempty"`                              // List of certificates
	Withdrawals     []*Withdrawal  `protobuf:"bytes,4,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`                                // List of withdrawals
	Mint            []*Multiasset  `protobuf:"bytes,5,rep,name=mint,proto3" json:"mint,omitempty"`                                              // List of minted custom assets
	ReferenceInputs []*TxInput     `protobuf:"bytes,6,rep,name=reference_inputs,json=referenceInputs,proto3" json:"reference_inputs,omitempty"` // List of reference inputs
	Witnesses       *WitnessSet    `protobuf:"bytes,7,opt,name=witnesses,proto3" json:"witnesses,omitempty"`                                    // Witnesses that validte the transaction
	Collateral      *Collateral    `protobuf:"bytes,8,opt,name=collateral,proto3" json:"collateral,omitempty"`                                  // Collateral details in case of failed transaction
	Fee             uint64         `protobuf:"varint,9,opt,name=fee,proto3" json:"fee,omitempty"`                                               // Transaction fee in ADA
	Validity        *TxValidity    `protobuf:"bytes,10,opt,name=validity,proto3" json:"validity,omitempty"`                                     // Validity interval of the transaction
	Successful      bool           `protobuf:"varint,11,opt,name=successful,proto3" json:"successful,omitempty"`                                // Flag indicating whether the transaction was successful
	Auxiliary       *AuxData       `protobuf:"bytes,12,opt,name=auxiliary,proto3" json:"auxiliary,omitempty"`                                   // Auxiliary data not directly tied to the validation process
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{10}
}

func (x *Tx) GetInputs() []*TxInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Tx) GetOutputs() []*TxOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Tx) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *Tx) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *Tx) GetMint() []*Multiasset {
	if x != nil {
		return x.Mint
	}
	return nil
}

func (x *Tx) GetReferenceInputs() []*TxInput {
	if x != nil {
		return x.ReferenceInputs
	}
	return nil
}

func (x *Tx) GetWitnesses() *WitnessSet {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

func (x *Tx) GetCollateral() *Collateral {
	if x != nil {
		return x.Collateral
	}
	return nil
}

func (x *Tx) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Tx) GetValidity() *TxValidity {
	if x != nil {
		return x.Validity
	}
	return nil
}

func (x *Tx) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *Tx) GetAuxiliary() *AuxData {
	if x != nil {
		return x.Auxiliary
	}
	return nil
}

// Contains the header information for a block.
type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"` // Slot number.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`  // Block hash.
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{11}
}

func (x *BlockHeader) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BlockHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// Contains the transaction data for a block.
type BlockBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx []*Tx `protobuf:"bytes,1,rep,name=tx,proto3" json:"tx,omitempty"` // List of transactions.
}

func (x *BlockBody) Reset() {
	*x = BlockBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBody) ProtoMessage() {}

func (x *BlockBody) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBody.ProtoReflect.Descriptor instead.
func (*BlockBody) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{12}
}

func (x *BlockBody) GetTx() []*Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Represents a complete block, including header and body.
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Block header.
	Body   *BlockBody   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`     // Block body.
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{13}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetBody() *BlockBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// Represents a VKey witness used to sign a transaction.
type VKeyWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vkey      []byte `protobuf:"bytes,1,opt,name=vkey,proto3" json:"vkey,omitempty"`           // Verification key.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"` // Signature generated using the associated private key.
}

func (x *VKeyWitness) Reset() {
	*x = VKeyWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VKeyWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VKeyWitness) ProtoMessage() {}

func (x *VKeyWitness) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VKeyWitness.ProtoReflect.Descriptor instead.
func (*VKeyWitness) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{14}
}

func (x *VKeyWitness) GetVkey() []byte {
	if x != nil {
		return x.Vkey
	}
	return nil
}

func (x *VKeyWitness) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Represents a native script in Cardano.
type NativeScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to NativeScript:
	//
	//	*NativeScript_ScriptPubkey
	//	*NativeScript_ScriptAll
	//	*NativeScript_ScriptAny
	//	*NativeScript_ScriptNOfK
	//	*NativeScript_InvalidBefore
	//	*NativeScript_InvalidHereafter
	NativeScript isNativeScript_NativeScript `protobuf_oneof:"native_script"`
}

func (x *NativeScript) Reset() {
	*x = NativeScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeScript) ProtoMessage() {}

func (x *NativeScript) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeScript.ProtoReflect.Descriptor instead.
func (*NativeScript) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{15}
}

func (m *NativeScript) GetNativeScript() isNativeScript_NativeScript {
	if m != nil {
		return m.NativeScript
	}
	return nil
}

func (x *NativeScript) GetScriptPubkey() []byte {
	if x, ok := x.GetNativeScript().(*NativeScript_ScriptPubkey); ok {
		return x.ScriptPubkey
	}
	return nil
}

func (x *NativeScript) GetScriptAll() *NativeScriptList {
	if x, ok := x.GetNativeScript().(*NativeScript_ScriptAll); ok {
		return x.ScriptAll
	}
	return nil
}

func (x *NativeScript) GetScriptAny() *NativeScriptList {
	if x, ok := x.GetNativeScript().(*NativeScript_ScriptAny); ok {
		return x.ScriptAny
	}
	return nil
}

func (x *NativeScript) GetScriptNOfK() *ScriptNOfK {
	if x, ok := x.GetNativeScript().(*NativeScript_ScriptNOfK); ok {
		return x.ScriptNOfK
	}
	return nil
}

func (x *NativeScript) GetInvalidBefore() uint64 {
	if x, ok := x.GetNativeScript().(*NativeScript_InvalidBefore); ok {
		return x.InvalidBefore
	}
	return 0
}

func (x *NativeScript) GetInvalidHereafter() uint64 {
	if x, ok := x.GetNativeScript().(*NativeScript_InvalidHereafter); ok {
		return x.InvalidHereafter
	}
	return 0
}

type isNativeScript_NativeScript interface {
	isNativeScript_NativeScript()
}

type NativeScript_ScriptPubkey struct {
	ScriptPubkey []byte `protobuf:"bytes,1,opt,name=script_pubkey,json=scriptPubkey,proto3,oneof"` // Script based on an address key hash.
}

type NativeScript_ScriptAll struct {
	ScriptAll *NativeScriptList `protobuf:"bytes,2,opt,name=script_all,json=scriptAll,proto3,oneof"` // Script that requires all nested scripts to be satisfied.
}

type NativeScript_ScriptAny struct {
	ScriptAny *NativeScriptList `protobuf:"bytes,3,opt,name=script_any,json=scriptAny,proto3,oneof"` // Script that requires any of the nested scripts to be satisfied.
}

type NativeScript_ScriptNOfK struct {
	ScriptNOfK *ScriptNOfK `protobuf:"bytes,4,opt,name=script_n_of_k,json=scriptNOfK,proto3,oneof"` // Script that requires k out of n nested scripts to be satisfied.
}

type NativeScript_InvalidBefore struct {
	InvalidBefore uint64 `protobuf:"varint,5,opt,name=invalid_before,json=invalidBefore,proto3,oneof"` // Slot number before which the script is invalid.
}

type NativeScript_InvalidHereafter struct {
	InvalidHereafter uint64 `protobuf:"varint,6,opt,name=invalid_hereafter,json=invalidHereafter,proto3,oneof"` // Slot number after which the script is invalid.
}

func (*NativeScript_ScriptPubkey) isNativeScript_NativeScript() {}

func (*NativeScript_ScriptAll) isNativeScript_NativeScript() {}

func (*NativeScript_ScriptAny) isNativeScript_NativeScript() {}

func (*NativeScript_ScriptNOfK) isNativeScript_NativeScript() {}

func (*NativeScript_InvalidBefore) isNativeScript_NativeScript() {}

func (*NativeScript_InvalidHereafter) isNativeScript_NativeScript() {}

// Represents a list of native scripts.
type NativeScriptList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*NativeScript `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // List of native scripts.
}

func (x *NativeScriptList) Reset() {
	*x = NativeScriptList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeScriptList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeScriptList) ProtoMessage() {}

func (x *NativeScriptList) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeScriptList.ProtoReflect.Descriptor instead.
func (*NativeScriptList) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{16}
}

func (x *NativeScriptList) GetItems() []*NativeScript {
	if x != nil {
		return x.Items
	}
	return nil
}

// Represents a "k out of n" native script.
type ScriptNOfK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K       uint32          `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`            // The number of required satisfied scripts.
	Scripts []*NativeScript `protobuf:"bytes,2,rep,name=scripts,proto3" json:"scripts,omitempty"` // List of native scripts.
}

func (x *ScriptNOfK) Reset() {
	*x = ScriptNOfK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptNOfK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptNOfK) ProtoMessage() {}

func (x *ScriptNOfK) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptNOfK.ProtoReflect.Descriptor instead.
func (*ScriptNOfK) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{17}
}

func (x *ScriptNOfK) GetK() uint32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *ScriptNOfK) GetScripts() []*NativeScript {
	if x != nil {
		return x.Scripts
	}
	return nil
}

// Represents a constructor for Plutus data in Cardano.
type Constr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag            uint32        `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	AnyConstructor uint64        `protobuf:"varint,2,opt,name=any_constructor,json=anyConstructor,proto3" json:"any_constructor,omitempty"`
	Fields         []*PlutusData `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Constr) Reset() {
	*x = Constr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constr) ProtoMessage() {}

func (x *Constr) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constr.ProtoReflect.Descriptor instead.
func (*Constr) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{18}
}

func (x *Constr) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *Constr) GetAnyConstructor() uint64 {
	if x != nil {
		return x.AnyConstructor
	}
	return 0
}

func (x *Constr) GetFields() []*PlutusData {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Represents a big integer for Plutus data in Cardano.
type BigInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BigInt:
	//
	//	*BigInt_Int
	//	*BigInt_BigUInt
	//	*BigInt_BigNInt
	BigInt isBigInt_BigInt `protobuf_oneof:"big_int"`
}

func (x *BigInt) Reset() {
	*x = BigInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigInt) ProtoMessage() {}

func (x *BigInt) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigInt.ProtoReflect.Descriptor instead.
func (*BigInt) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{19}
}

func (m *BigInt) GetBigInt() isBigInt_BigInt {
	if m != nil {
		return m.BigInt
	}
	return nil
}

func (x *BigInt) GetInt() int64 {
	if x, ok := x.GetBigInt().(*BigInt_Int); ok {
		return x.Int
	}
	return 0
}

func (x *BigInt) GetBigUInt() []byte {
	if x, ok := x.GetBigInt().(*BigInt_BigUInt); ok {
		return x.BigUInt
	}
	return nil
}

func (x *BigInt) GetBigNInt() []byte {
	if x, ok := x.GetBigInt().(*BigInt_BigNInt); ok {
		return x.BigNInt
	}
	return nil
}

type isBigInt_BigInt interface {
	isBigInt_BigInt()
}

type BigInt_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,proto3,oneof"`
}

type BigInt_BigUInt struct {
	BigUInt []byte `protobuf:"bytes,2,opt,name=big_u_int,json=bigUInt,proto3,oneof"`
}

type BigInt_BigNInt struct {
	BigNInt []byte `protobuf:"bytes,3,opt,name=big_n_int,json=bigNInt,proto3,oneof"`
}

func (*BigInt_Int) isBigInt_BigInt() {}

func (*BigInt_BigUInt) isBigInt_BigInt() {}

func (*BigInt_BigNInt) isBigInt_BigInt() {}

// Represents a key-value pair for Plutus data in Cardano.
type PlutusDataPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *PlutusData `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // Key of the pair.
	Value *PlutusData `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Value of the pair.
}

func (x *PlutusDataPair) Reset() {
	*x = PlutusDataPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlutusDataPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlutusDataPair) ProtoMessage() {}

func (x *PlutusDataPair) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlutusDataPair.ProtoReflect.Descriptor instead.
func (*PlutusDataPair) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{20}
}

func (x *PlutusDataPair) GetKey() *PlutusData {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PlutusDataPair) GetValue() *PlutusData {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a Plutus data item in Cardano.
type PlutusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PlutusData:
	//
	//	*PlutusData_Constr
	//	*PlutusData_Map
	//	*PlutusData_BigInt
	//	*PlutusData_BoundedBytes
	//	*PlutusData_Array
	PlutusData isPlutusData_PlutusData `protobuf_oneof:"plutus_data"`
}

func (x *PlutusData) Reset() {
	*x = PlutusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlutusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlutusData) ProtoMessage() {}

func (x *PlutusData) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlutusData.ProtoReflect.Descriptor instead.
func (*PlutusData) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{21}
}

func (m *PlutusData) GetPlutusData() isPlutusData_PlutusData {
	if m != nil {
		return m.PlutusData
	}
	return nil
}

func (x *PlutusData) GetConstr() *Constr {
	if x, ok := x.GetPlutusData().(*PlutusData_Constr); ok {
		return x.Constr
	}
	return nil
}

func (x *PlutusData) GetMap() *PlutusDataMap {
	if x, ok := x.GetPlutusData().(*PlutusData_Map); ok {
		return x.Map
	}
	return nil
}

func (x *PlutusData) GetBigInt() *BigInt {
	if x, ok := x.GetPlutusData().(*PlutusData_BigInt); ok {
		return x.BigInt
	}
	return nil
}

func (x *PlutusData) GetBoundedBytes() []byte {
	if x, ok := x.GetPlutusData().(*PlutusData_BoundedBytes); ok {
		return x.BoundedBytes
	}
	return nil
}

func (x *PlutusData) GetArray() *PlutusDataArray {
	if x, ok := x.GetPlutusData().(*PlutusData_Array); ok {
		return x.Array
	}
	return nil
}

type isPlutusData_PlutusData interface {
	isPlutusData_PlutusData()
}

type PlutusData_Constr struct {
	Constr *Constr `protobuf:"bytes,1,opt,name=constr,proto3,oneof"` // Constructor.
}

type PlutusData_Map struct {
	Map *PlutusDataMap `protobuf:"bytes,2,opt,name=map,proto3,oneof"` // Map of Plutus data.
}

type PlutusData_BigInt struct {
	BigInt *BigInt `protobuf:"bytes,3,opt,name=big_int,json=bigInt,proto3,oneof"` // Big integer.
}

type PlutusData_BoundedBytes struct {
	BoundedBytes []byte `protobuf:"bytes,4,opt,name=bounded_bytes,json=boundedBytes,proto3,oneof"` // Bounded bytes.
}

type PlutusData_Array struct {
	Array *PlutusDataArray `protobuf:"bytes,5,opt,name=array,proto3,oneof"` // Array of Plutus data.
}

func (*PlutusData_Constr) isPlutusData_PlutusData() {}

func (*PlutusData_Map) isPlutusData_PlutusData() {}

func (*PlutusData_BigInt) isPlutusData_PlutusData() {}

func (*PlutusData_BoundedBytes) isPlutusData_PlutusData() {}

func (*PlutusData_Array) isPlutusData_PlutusData() {}

// Represents a map of Plutus data in Cardano.
type PlutusDataMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*PlutusDataPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"` // List of key-value pairs.
}

func (x *PlutusDataMap) Reset() {
	*x = PlutusDataMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlutusDataMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlutusDataMap) ProtoMessage() {}

func (x *PlutusDataMap) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlutusDataMap.ProtoReflect.Descriptor instead.
func (*PlutusDataMap) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{22}
}

func (x *PlutusDataMap) GetPairs() []*PlutusDataPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

// Represents an array of Plutus data in Cardano.
type PlutusDataArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PlutusData `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"` // List of Plutus data items.
}

func (x *PlutusDataArray) Reset() {
	*x = PlutusDataArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlutusDataArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlutusDataArray) ProtoMessage() {}

func (x *PlutusDataArray) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlutusDataArray.ProtoReflect.Descriptor instead.
func (*PlutusDataArray) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{23}
}

func (x *PlutusDataArray) GetItems() []*PlutusData {
	if x != nil {
		return x.Items
	}
	return nil
}

// Represents a script in Cardano.
type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Script:
	//
	//	*Script_Native
	//	*Script_PlutusV1
	//	*Script_PlutusV2
	Script isScript_Script `protobuf_oneof:"script"`
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{24}
}

func (m *Script) GetScript() isScript_Script {
	if m != nil {
		return m.Script
	}
	return nil
}

func (x *Script) GetNative() *NativeScript {
	if x, ok := x.GetScript().(*Script_Native); ok {
		return x.Native
	}
	return nil
}

func (x *Script) GetPlutusV1() []byte {
	if x, ok := x.GetScript().(*Script_PlutusV1); ok {
		return x.PlutusV1
	}
	return nil
}

func (x *Script) GetPlutusV2() []byte {
	if x, ok := x.GetScript().(*Script_PlutusV2); ok {
		return x.PlutusV2
	}
	return nil
}

type isScript_Script interface {
	isScript_Script()
}

type Script_Native struct {
	Native *NativeScript `protobuf:"bytes,1,opt,name=native,proto3,oneof"` // Native script.
}

type Script_PlutusV1 struct {
	PlutusV1 []byte `protobuf:"bytes,2,opt,name=plutus_v1,json=plutusV1,proto3,oneof"` // Plutus V1 script.
}

type Script_PlutusV2 struct {
	PlutusV2 []byte `protobuf:"bytes,3,opt,name=plutus_v2,json=plutusV2,proto3,oneof"` // Plutus V2 script.
}

func (*Script_Native) isScript_Script() {}

func (*Script_PlutusV1) isScript_Script() {}

func (*Script_PlutusV2) isScript_Script() {}

type Metadatum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Metadatum:
	//
	//	*Metadatum_Int
	//	*Metadatum_Bytes
	//	*Metadatum_Text
	//	*Metadatum_Array
	//	*Metadatum_Map
	Metadatum isMetadatum_Metadatum `protobuf_oneof:"metadatum"`
}

func (x *Metadatum) Reset() {
	*x = Metadatum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadatum) ProtoMessage() {}

func (x *Metadatum) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadatum.ProtoReflect.Descriptor instead.
func (*Metadatum) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{25}
}

func (m *Metadatum) GetMetadatum() isMetadatum_Metadatum {
	if m != nil {
		return m.Metadatum
	}
	return nil
}

func (x *Metadatum) GetInt() int64 {
	if x, ok := x.GetMetadatum().(*Metadatum_Int); ok {
		return x.Int
	}
	return 0
}

func (x *Metadatum) GetBytes() []byte {
	if x, ok := x.GetMetadatum().(*Metadatum_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Metadatum) GetText() string {
	if x, ok := x.GetMetadatum().(*Metadatum_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Metadatum) GetArray() *MetadatumArray {
	if x, ok := x.GetMetadatum().(*Metadatum_Array); ok {
		return x.Array
	}
	return nil
}

func (x *Metadatum) GetMap() *MetadatumMap {
	if x, ok := x.GetMetadatum().(*Metadatum_Map); ok {
		return x.Map
	}
	return nil
}

type isMetadatum_Metadatum interface {
	isMetadatum_Metadatum()
}

type Metadatum_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,proto3,oneof"`
}

type Metadatum_Bytes struct {
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3,oneof"`
}

type Metadatum_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type Metadatum_Array struct {
	Array *MetadatumArray `protobuf:"bytes,4,opt,name=array,proto3,oneof"`
}

type Metadatum_Map struct {
	Map *MetadatumMap `protobuf:"bytes,5,opt,name=map,proto3,oneof"`
}

func (*Metadatum_Int) isMetadatum_Metadatum() {}

func (*Metadatum_Bytes) isMetadatum_Metadatum() {}

func (*Metadatum_Text) isMetadatum_Metadatum() {}

func (*Metadatum_Array) isMetadatum_Metadatum() {}

func (*Metadatum_Map) isMetadatum_Metadatum() {}

type MetadatumArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Metadatum `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MetadatumArray) Reset() {
	*x = MetadatumArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadatumArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadatumArray) ProtoMessage() {}

func (x *MetadatumArray) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadatumArray.ProtoReflect.Descriptor instead.
func (*MetadatumArray) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{26}
}

func (x *MetadatumArray) GetItems() []*Metadatum {
	if x != nil {
		return x.Items
	}
	return nil
}

type MetadatumMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*MetadatumPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *MetadatumMap) Reset() {
	*x = MetadatumMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadatumMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadatumMap) ProtoMessage() {}

func (x *MetadatumMap) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadatumMap.ProtoReflect.Descriptor instead.
func (*MetadatumMap) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{27}
}

func (x *MetadatumMap) GetPairs() []*MetadatumPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type MetadatumPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *Metadatum `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Metadatum `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MetadatumPair) Reset() {
	*x = MetadatumPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadatumPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadatumPair) ProtoMessage() {}

func (x *MetadatumPair) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadatumPair.ProtoReflect.Descriptor instead.
func (*MetadatumPair) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{28}
}

func (x *MetadatumPair) GetKey() *Metadatum {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MetadatumPair) GetValue() *Metadatum {
	if x != nil {
		return x.Value
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label uint64     `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
	Value *Metadatum `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{29}
}

func (x *Metadata) GetLabel() uint64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *Metadata) GetValue() *Metadatum {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a stake credential in Cardano.
type StakeCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StakeCredential:
	//
	//	*StakeCredential_AddrKeyHash
	//	*StakeCredential_ScriptHash
	StakeCredential isStakeCredential_StakeCredential `protobuf_oneof:"stake_credential"`
}

func (x *StakeCredential) Reset() {
	*x = StakeCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeCredential) ProtoMessage() {}

func (x *StakeCredential) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeCredential.ProtoReflect.Descriptor instead.
func (*StakeCredential) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{30}
}

func (m *StakeCredential) GetStakeCredential() isStakeCredential_StakeCredential {
	if m != nil {
		return m.StakeCredential
	}
	return nil
}

func (x *StakeCredential) GetAddrKeyHash() []byte {
	if x, ok := x.GetStakeCredential().(*StakeCredential_AddrKeyHash); ok {
		return x.AddrKeyHash
	}
	return nil
}

func (x *StakeCredential) GetScriptHash() []byte {
	if x, ok := x.GetStakeCredential().(*StakeCredential_ScriptHash); ok {
		return x.ScriptHash
	}
	return nil
}

type isStakeCredential_StakeCredential interface {
	isStakeCredential_StakeCredential()
}

type StakeCredential_AddrKeyHash struct {
	AddrKeyHash []byte `protobuf:"bytes,1,opt,name=addr_key_hash,json=addrKeyHash,proto3,oneof"` // Address key hash.
}

type StakeCredential_ScriptHash struct {
	ScriptHash []byte `protobuf:"bytes,2,opt,name=script_hash,json=scriptHash,proto3,oneof"` // Script hash.
}

func (*StakeCredential_AddrKeyHash) isStakeCredential_StakeCredential() {}

func (*StakeCredential_ScriptHash) isStakeCredential_StakeCredential() {}

// Represents a rational number as a fraction.
type RationalNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numerator   int32  `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator uint32 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *RationalNumber) Reset() {
	*x = RationalNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RationalNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RationalNumber) ProtoMessage() {}

func (x *RationalNumber) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RationalNumber.ProtoReflect.Descriptor instead.
func (*RationalNumber) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{31}
}

func (x *RationalNumber) GetNumerator() int32 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *RationalNumber) GetDenominator() uint32 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

// Represents a relay in Cardano.
type Relay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpV4    []byte `protobuf:"bytes,1,opt,name=ip_v4,json=ipV4,proto3" json:"ip_v4,omitempty"`
	IpV6    []byte `protobuf:"bytes,2,opt,name=ip_v6,json=ipV6,proto3" json:"ip_v6,omitempty"`
	DnsName string `protobuf:"bytes,3,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	Port    uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Relay) Reset() {
	*x = Relay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{32}
}

func (x *Relay) GetIpV4() []byte {
	if x != nil {
		return x.IpV4
	}
	return nil
}

func (x *Relay) GetIpV6() []byte {
	if x != nil {
		return x.IpV6
	}
	return nil
}

func (x *Relay) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *Relay) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Represents pool metadata in Cardano.
type PoolMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *PoolMetadata) Reset() {
	*x = PoolMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMetadata) ProtoMessage() {}

func (x *PoolMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolMetadata.ProtoReflect.Descriptor instead.
func (*PoolMetadata) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{33}
}

func (x *PoolMetadata) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PoolMetadata) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// Represents a certificate in Cardano.
type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Certificate:
	//
	//	*Certificate_StakeRegistration
	//	*Certificate_StakeDeregistration
	//	*Certificate_StakeDelegation
	//	*Certificate_PoolRegistration
	//	*Certificate_PoolRetirement
	//	*Certificate_GenesisKeyDelegation
	//	*Certificate_MirCert
	Certificate isCertificate_Certificate `protobuf_oneof:"certificate"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{34}
}

func (m *Certificate) GetCertificate() isCertificate_Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (x *Certificate) GetStakeRegistration() *StakeCredential {
	if x, ok := x.GetCertificate().(*Certificate_StakeRegistration); ok {
		return x.StakeRegistration
	}
	return nil
}

func (x *Certificate) GetStakeDeregistration() *StakeCredential {
	if x, ok := x.GetCertificate().(*Certificate_StakeDeregistration); ok {
		return x.StakeDeregistration
	}
	return nil
}

func (x *Certificate) GetStakeDelegation() *StakeDelegationCert {
	if x, ok := x.GetCertificate().(*Certificate_StakeDelegation); ok {
		return x.StakeDelegation
	}
	return nil
}

func (x *Certificate) GetPoolRegistration() *PoolRegistrationCert {
	if x, ok := x.GetCertificate().(*Certificate_PoolRegistration); ok {
		return x.PoolRegistration
	}
	return nil
}

func (x *Certificate) GetPoolRetirement() *PoolRetirementCert {
	if x, ok := x.GetCertificate().(*Certificate_PoolRetirement); ok {
		return x.PoolRetirement
	}
	return nil
}

func (x *Certificate) GetGenesisKeyDelegation() *GenesisKeyDelegationCert {
	if x, ok := x.GetCertificate().(*Certificate_GenesisKeyDelegation); ok {
		return x.GenesisKeyDelegation
	}
	return nil
}

func (x *Certificate) GetMirCert() *MirCert {
	if x, ok := x.GetCertificate().(*Certificate_MirCert); ok {
		return x.MirCert
	}
	return nil
}

type isCertificate_Certificate interface {
	isCertificate_Certificate()
}

type Certificate_StakeRegistration struct {
	StakeRegistration *StakeCredential `protobuf:"bytes,1,opt,name=stake_registration,json=stakeRegistration,proto3,oneof"` // Stake registration certificate.
}

type Certificate_StakeDeregistration struct {
	StakeDeregistration *StakeCredential `protobuf:"bytes,2,opt,name=stake_deregistration,json=stakeDeregistration,proto3,oneof"` // Stake deregistration certificate.
}

type Certificate_StakeDelegation struct {
	StakeDelegation *StakeDelegationCert `protobuf:"bytes,3,opt,name=stake_delegation,json=stakeDelegation,proto3,oneof"` // Stake delegation certificate.
}

type Certificate_PoolRegistration struct {
	PoolRegistration *PoolRegistrationCert `protobuf:"bytes,4,opt,name=pool_registration,json=poolRegistration,proto3,oneof"` // Pool registration certificate.
}

type Certificate_PoolRetirement struct {
	PoolRetirement *PoolRetirementCert `protobuf:"bytes,5,opt,name=pool_retirement,json=poolRetirement,proto3,oneof"` // Pool retirement certificate.
}

type Certificate_GenesisKeyDelegation struct {
	GenesisKeyDelegation *GenesisKeyDelegationCert `protobuf:"bytes,6,opt,name=genesis_key_delegation,json=genesisKeyDelegation,proto3,oneof"` // Genesis key delegation certificate.
}

type Certificate_MirCert struct {
	MirCert *MirCert `protobuf:"bytes,7,opt,name=mir_cert,json=mirCert,proto3,oneof"` // Move instantaneous rewards certificate.
}

func (*Certificate_StakeRegistration) isCertificate_Certificate() {}

func (*Certificate_StakeDeregistration) isCertificate_Certificate() {}

func (*Certificate_StakeDelegation) isCertificate_Certificate() {}

func (*Certificate_PoolRegistration) isCertificate_Certificate() {}

func (*Certificate_PoolRetirement) isCertificate_Certificate() {}

func (*Certificate_GenesisKeyDelegation) isCertificate_Certificate() {}

func (*Certificate_MirCert) isCertificate_Certificate() {}

// Represents a stake delegation certificate in Cardano.
type StakeDelegationCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeCredential *StakeCredential `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"` // Stake credential.
	PoolKeyhash     []byte           `protobuf:"bytes,2,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"`             // Pool key hash.
}

func (x *StakeDelegationCert) Reset() {
	*x = StakeDelegationCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeDelegationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeDelegationCert) ProtoMessage() {}

func (x *StakeDelegationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeDelegationCert.ProtoReflect.Descriptor instead.
func (*StakeDelegationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{35}
}

func (x *StakeDelegationCert) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *StakeDelegationCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

// Represents a pool registration certificate in Cardano.
type PoolRegistrationCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator      []byte          `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`                                // Operator key hash.
	VrfKeyhash    []byte          `protobuf:"bytes,2,opt,name=vrf_keyhash,json=vrfKeyhash,proto3" json:"vrf_keyhash,omitempty"`          // VRF key hash.
	Pledge        uint64          `protobuf:"varint,3,opt,name=pledge,proto3" json:"pledge,omitempty"`                                   // Pledge amount.
	Cost          uint64          `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`                                       // Pool cost.
	Margin        *RationalNumber `protobuf:"bytes,5,opt,name=margin,proto3" json:"margin,omitempty"`                                    // Pool margin.
	RewardAccount []byte          `protobuf:"bytes,6,opt,name=reward_account,json=rewardAccount,proto3" json:"reward_account,omitempty"` // Reward account.
	PoolOwners    [][]byte        `protobuf:"bytes,7,rep,name=pool_owners,json=poolOwners,proto3" json:"pool_owners,omitempty"`          // List of pool owner key hashes.
	Relays        []*Relay        `protobuf:"bytes,8,rep,name=relays,proto3" json:"relays,omitempty"`                                    // List of relays.
	PoolMetadata  *PoolMetadata   `protobuf:"bytes,9,opt,name=pool_metadata,json=poolMetadata,proto3" json:"pool_metadata,omitempty"`    // Pool metadata.
}

func (x *PoolRegistrationCert) Reset() {
	*x = PoolRegistrationCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolRegistrationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRegistrationCert) ProtoMessage() {}

func (x *PoolRegistrationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolRegistrationCert.ProtoReflect.Descriptor instead.
func (*PoolRegistrationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{36}
}

func (x *PoolRegistrationCert) GetOperator() []byte {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *PoolRegistrationCert) GetVrfKeyhash() []byte {
	if x != nil {
		return x.VrfKeyhash
	}
	return nil
}

func (x *PoolRegistrationCert) GetPledge() uint64 {
	if x != nil {
		return x.Pledge
	}
	return 0
}

func (x *PoolRegistrationCert) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *PoolRegistrationCert) GetMargin() *RationalNumber {
	if x != nil {
		return x.Margin
	}
	return nil
}

func (x *PoolRegistrationCert) GetRewardAccount() []byte {
	if x != nil {
		return x.RewardAccount
	}
	return nil
}

func (x *PoolRegistrationCert) GetPoolOwners() [][]byte {
	if x != nil {
		return x.PoolOwners
	}
	return nil
}

func (x *PoolRegistrationCert) GetRelays() []*Relay {
	if x != nil {
		return x.Relays
	}
	return nil
}

func (x *PoolRegistrationCert) GetPoolMetadata() *PoolMetadata {
	if x != nil {
		return x.PoolMetadata
	}
	return nil
}

// Represents a pool retirement certificate in Cardano.
type PoolRetirementCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolKeyhash []byte `protobuf:"bytes,1,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"` // Pool key hash.
	Epoch       uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`                               // Retirement epoch.
}

func (x *PoolRetirementCert) Reset() {
	*x = PoolRetirementCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolRetirementCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRetirementCert) ProtoMessage() {}

func (x *PoolRetirementCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolRetirementCert.ProtoReflect.Descriptor instead.
func (*PoolRetirementCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{37}
}

func (x *PoolRetirementCert) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

func (x *PoolRetirementCert) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

// Represents a genesis key delegation certificate in Cardano.
type GenesisKeyDelegationCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenesisHash         []byte `protobuf:"bytes,1,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`                           // Genesis hash.
	GenesisDelegateHash []byte `protobuf:"bytes,2,opt,name=genesis_delegate_hash,json=genesisDelegateHash,proto3" json:"genesis_delegate_hash,omitempty"` // Genesis delegate hash.
	VrfKeyhash          []byte `protobuf:"bytes,3,opt,name=vrf_keyhash,json=vrfKeyhash,proto3" json:"vrf_keyhash,omitempty"`                              // VRF key hash.
}

func (x *GenesisKeyDelegationCert) Reset() {
	*x = GenesisKeyDelegationCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisKeyDelegationCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisKeyDelegationCert) ProtoMessage() {}

func (x *GenesisKeyDelegationCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisKeyDelegationCert.ProtoReflect.Descriptor instead.
func (*GenesisKeyDelegationCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{38}
}

func (x *GenesisKeyDelegationCert) GetGenesisHash() []byte {
	if x != nil {
		return x.GenesisHash
	}
	return nil
}

func (x *GenesisKeyDelegationCert) GetGenesisDelegateHash() []byte {
	if x != nil {
		return x.GenesisDelegateHash
	}
	return nil
}

func (x *GenesisKeyDelegationCert) GetVrfKeyhash() []byte {
	if x != nil {
		return x.VrfKeyhash
	}
	return nil
}

type MirTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeCredential *StakeCredential `protobuf:"bytes,1,opt,name=stake_credential,json=stakeCredential,proto3" json:"stake_credential,omitempty"`
	DeltaCoin       int64            `protobuf:"varint,2,opt,name=delta_coin,json=deltaCoin,proto3" json:"delta_coin,omitempty"`
}

func (x *MirTarget) Reset() {
	*x = MirTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirTarget) ProtoMessage() {}

func (x *MirTarget) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirTarget.ProtoReflect.Descriptor instead.
func (*MirTarget) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{39}
}

func (x *MirTarget) GetStakeCredential() *StakeCredential {
	if x != nil {
		return x.StakeCredential
	}
	return nil
}

func (x *MirTarget) GetDeltaCoin() int64 {
	if x != nil {
		return x.DeltaCoin
	}
	return 0
}

// Represents a move instantaneous reward certificate in Cardano.
type MirCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From     MirSource    `protobuf:"varint,1,opt,name=from,proto3,enum=utxorpc.v1alpha.cardano.MirSource" json:"from,omitempty"`
	To       []*MirTarget `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	OtherPot uint64       `protobuf:"varint,3,opt,name=other_pot,json=otherPot,proto3" json:"other_pot,omitempty"`
}

func (x *MirCert) Reset() {
	*x = MirCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirCert) ProtoMessage() {}

func (x *MirCert) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirCert.ProtoReflect.Descriptor instead.
func (*MirCert) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{40}
}

func (x *MirCert) GetFrom() MirSource {
	if x != nil {
		return x.From
	}
	return MirSource_MIR_SOURCE_UNSPECIFIED
}

func (x *MirCert) GetTo() []*MirTarget {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *MirCert) GetOtherPot() uint64 {
	if x != nil {
		return x.OtherPot
	}
	return 0
}

// Pattern of an address that can be used to evaluate matching predicates.
type AddressPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByronAddress       []byte `protobuf:"bytes,1,opt,name=byron_address,json=byronAddress,proto3" json:"byron_address,omitempty"`
	PaymentPart        []byte `protobuf:"bytes,2,opt,name=payment_part,json=paymentPart,proto3" json:"payment_part,omitempty"`
	DelegationPart     []byte `protobuf:"bytes,3,opt,name=delegation_part,json=delegationPart,proto3" json:"delegation_part,omitempty"`
	PaymentIsScript    bool   `protobuf:"varint,4,opt,name=payment_is_script,json=paymentIsScript,proto3" json:"payment_is_script,omitempty"`
	DelegationIsScript bool   `protobuf:"varint,5,opt,name=delegation_is_script,json=delegationIsScript,proto3" json:"delegation_is_script,omitempty"`
}

func (x *AddressPattern) Reset() {
	*x = AddressPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressPattern) ProtoMessage() {}

func (x *AddressPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressPattern.ProtoReflect.Descriptor instead.
func (*AddressPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{41}
}

func (x *AddressPattern) GetByronAddress() []byte {
	if x != nil {
		return x.ByronAddress
	}
	return nil
}

func (x *AddressPattern) GetPaymentPart() []byte {
	if x != nil {
		return x.PaymentPart
	}
	return nil
}

func (x *AddressPattern) GetDelegationPart() []byte {
	if x != nil {
		return x.DelegationPart
	}
	return nil
}

func (x *AddressPattern) GetPaymentIsScript() bool {
	if x != nil {
		return x.PaymentIsScript
	}
	return false
}

func (x *AddressPattern) GetDelegationIsScript() bool {
	if x != nil {
		return x.DelegationIsScript
	}
	return false
}

// Pattern of a native asset that can be used to evaluate matching predicates.
type AssetPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssetPattern) Reset() {
	*x = AssetPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetPattern) ProtoMessage() {}

func (x *AssetPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetPattern.ProtoReflect.Descriptor instead.
func (*AssetPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{42}
}

// Pattern of a tx output that can be used to evaluate matching predicates.
type OutputPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OutputPattern) Reset() {
	*x = OutputPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputPattern) ProtoMessage() {}

func (x *OutputPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputPattern.ProtoReflect.Descriptor instead.
func (*OutputPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{43}
}

// Pattern of an datum that can be used to evaluate matching predicates.
type DatumPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DatumPattern) Reset() {
	*x = DatumPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatumPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatumPattern) ProtoMessage() {}

func (x *DatumPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatumPattern.ProtoReflect.Descriptor instead.
func (*DatumPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{44}
}

// Pattern of a Tx that can be used to evaluate matching predicates.
type TxPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TxPattern:
	//
	//	*TxPattern_AnyOutput
	//	*TxPattern_AnyAddress
	//	*TxPattern_AnyAsset
	//	*TxPattern_AnyDatum
	TxPattern isTxPattern_TxPattern `protobuf_oneof:"tx_pattern"`
}

func (x *TxPattern) Reset() {
	*x = TxPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxPattern) ProtoMessage() {}

func (x *TxPattern) ProtoReflect() protoreflect.Message {
	mi := &file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxPattern.ProtoReflect.Descriptor instead.
func (*TxPattern) Descriptor() ([]byte, []int) {
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP(), []int{45}
}

func (m *TxPattern) GetTxPattern() isTxPattern_TxPattern {
	if m != nil {
		return m.TxPattern
	}
	return nil
}

func (x *TxPattern) GetAnyOutput() *OutputPattern {
	if x, ok := x.GetTxPattern().(*TxPattern_AnyOutput); ok {
		return x.AnyOutput
	}
	return nil
}

func (x *TxPattern) GetAnyAddress() *AddressPattern {
	if x, ok := x.GetTxPattern().(*TxPattern_AnyAddress); ok {
		return x.AnyAddress
	}
	return nil
}

func (x *TxPattern) GetAnyAsset() *AssetPattern {
	if x, ok := x.GetTxPattern().(*TxPattern_AnyAsset); ok {
		return x.AnyAsset
	}
	return nil
}

func (x *TxPattern) GetAnyDatum() *DatumPattern {
	if x, ok := x.GetTxPattern().(*TxPattern_AnyDatum); ok {
		return x.AnyDatum
	}
	return nil
}

type isTxPattern_TxPattern interface {
	isTxPattern_TxPattern()
}

type TxPattern_AnyOutput struct {
	AnyOutput *OutputPattern `protobuf:"bytes,1,opt,name=any_output,json=anyOutput,proto3,oneof"` // Match any output that exhibits this pattern.
}

type TxPattern_AnyAddress struct {
	AnyAddress *AddressPattern `protobuf:"bytes,2,opt,name=any_address,json=anyAddress,proto3,oneof"` // Match any address (inputs, outputs, collateral, etc) that exhibits this pattern.
}

type TxPattern_AnyAsset struct {
	AnyAsset *AssetPattern `protobuf:"bytes,3,opt,name=any_asset,json=anyAsset,proto3,oneof"` // Match any asset that exhibits this pattern.
}

type TxPattern_AnyDatum struct {
	AnyDatum *DatumPattern `protobuf:"bytes,4,opt,name=any_datum,json=anyDatum,proto3,oneof"` // Match any datum that exhibits this pattern.
}

func (*TxPattern_AnyOutput) isTxPattern_TxPattern() {}

func (*TxPattern_AnyAddress) isTxPattern_TxPattern() {}

func (*TxPattern_AnyAsset) isTxPattern_TxPattern() {}

func (*TxPattern_AnyDatum) isTxPattern_TxPattern() {}

var File_utxorpc_v1alpha_cardano_cardano_proto protoreflect.FileDescriptor

var file_utxorpc_v1alpha_cardano_cardano_proto_rawDesc = []byte{
	0x0a, 0x25, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x22, 0x89, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65,
	0x72, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x22, 0xc4, 0x01, 0x0a,
	0x07, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x08, 0x61, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x65, 0x72, 0x22, 0x88, 0x02, 0x0a, 0x08, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x3b,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x59,
	0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x61, 0x0a, 0x0a, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x0a,
	0x54, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x22, 0xc9, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x47,
	0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x76, 0x6b, 0x65, 0x79, 0x77, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x56, 0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x0b, 0x76, 0x6b, 0x65, 0x79, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x6c, 0x75, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x75, 0x6d,
	0x73, 0x22, 0x83, 0x01, 0x0a, 0x07, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x07,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x07,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0xcd, 0x05, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x38,
	0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12,
	0x4b, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x09,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x74, 0x52, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x54, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x75, 0x78, 0x69, 0x6c,
	0x69, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x61, 0x75,
	0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x22, 0x35, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x38,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x22, 0x7d, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x3f, 0x0a, 0x0b, 0x56, 0x4b, 0x65, 0x79, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x76, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x0c, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x6e, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x4e, 0x4f, 0x66, 0x4b, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x4f,
	0x66, 0x4b, 0x12, 0x27, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x48, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x4f, 0x0a, 0x10, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5b, 0x0a, 0x0a,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x4f, 0x66, 0x4b, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6b, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x07, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x3b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x63, 0x0a, 0x06,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69,
	0x67, 0x5f, 0x75, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x07, 0x62, 0x69, 0x67, 0x55, 0x49, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x69, 0x67, 0x4e, 0x49, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74,
	0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x74, 0x75,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x12, 0x3a, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x07,
	0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4e, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61,
	0x70, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75, 0x74, 0x75,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x22, 0x4c, 0x0a, 0x0f, 0x50, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x75,
	0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x91,
	0x01, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6c,
	0x75, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x56, 0x31, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6c, 0x75,
	0x74, 0x75, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x6c, 0x75, 0x74, 0x75, 0x73, 0x56, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x03, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x42, 0x0b,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x22, 0x4a, 0x0a, 0x0e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x38, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4c, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x50, 0x61, 0x69, 0x72, 0x12, 0x34, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6e, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x42, 0x12,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x50, 0x0a, 0x0e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x13, 0x0a,
	0x05, 0x69, 0x70, 0x5f, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69, 0x70,
	0x56, 0x34, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x70, 0x5f, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x69, 0x70, 0x56, 0x36, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x34, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x91, 0x05, 0x0a,
	0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5c, 0x0a, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x75,
	0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x74,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x69, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d,
	0x69, 0x72, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x8c, 0x03, 0x0a, 0x14, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x72, 0x66, 0x5f, 0x6b, 0x65, 0x79,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x72, 0x66, 0x4b,
	0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x06, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x4d, 0x0a, 0x12, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6b, 0x65,
	0x79, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6f, 0x6f,
	0x6c, 0x4b, 0x65, 0x79, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x92,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32,
	0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x72, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x72, 0x66, 0x4b, 0x65, 0x79, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x7f, 0x0a, 0x09, 0x4d, 0x69, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x53, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x74, 0x78,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x43, 0x6f, 0x69, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x07, 0x4d, 0x69, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x36, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d, 0x69, 0x72, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4d,
	0x69, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x79, 0x72, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x79, 0x72, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x0e, 0x0a, 0x0c,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0xba, 0x02, 0x0a,
	0x09, 0x54, 0x78, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x6e,
	0x79, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e, 0x79, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x44, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x79,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x74,
	0x78, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2a, 0xa2, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x65, 0x72, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50,
	0x4f, 0x53, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d,
	0x45, 0x52, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x52, 0x5f, 0x50, 0x55,
	0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x04, 0x2a, 0x59,
	0x0a, 0x09, 0x4d, 0x69, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x49, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x52, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x53, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x59, 0x10, 0x02, 0x42, 0xe1, 0x01, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x2e, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x42, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x75, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0xa2, 0x02, 0x03, 0x55, 0x56, 0x43, 0xaa, 0x02, 0x17, 0x55, 0x74, 0x78, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0xca, 0x02, 0x17, 0x55, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5c, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0xe2, 0x02, 0x23, 0x55, 0x74,
	0x78, 0x6f, 0x72, 0x70, 0x63, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x43, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x19, 0x55, 0x74, 0x78, 0x6f, 0x72, 0x70, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x3a, 0x3a, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_utxorpc_v1alpha_cardano_cardano_proto_rawDescOnce sync.Once
	file_utxorpc_v1alpha_cardano_cardano_proto_rawDescData = file_utxorpc_v1alpha_cardano_cardano_proto_rawDesc
)

func file_utxorpc_v1alpha_cardano_cardano_proto_rawDescGZIP() []byte {
	file_utxorpc_v1alpha_cardano_cardano_proto_rawDescOnce.Do(func() {
		file_utxorpc_v1alpha_cardano_cardano_proto_rawDescData = protoimpl.X.CompressGZIP(file_utxorpc_v1alpha_cardano_cardano_proto_rawDescData)
	})
	return file_utxorpc_v1alpha_cardano_cardano_proto_rawDescData
}

var file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_utxorpc_v1alpha_cardano_cardano_proto_goTypes = []interface{}{
	(RedeemerPurpose)(0),             // 0: utxorpc.v1alpha.cardano.RedeemerPurpose
	(MirSource)(0),                   // 1: utxorpc.v1alpha.cardano.MirSource
	(*Redeemer)(nil),                 // 2: utxorpc.v1alpha.cardano.Redeemer
	(*TxInput)(nil),                  // 3: utxorpc.v1alpha.cardano.TxInput
	(*TxOutput)(nil),                 // 4: utxorpc.v1alpha.cardano.TxOutput
	(*Asset)(nil),                    // 5: utxorpc.v1alpha.cardano.Asset
	(*Multiasset)(nil),               // 6: utxorpc.v1alpha.cardano.Multiasset
	(*TxValidity)(nil),               // 7: utxorpc.v1alpha.cardano.TxValidity
	(*Collateral)(nil),               // 8: utxorpc.v1alpha.cardano.Collateral
	(*Withdrawal)(nil),               // 9: utxorpc.v1alpha.cardano.Withdrawal
	(*WitnessSet)(nil),               // 10: utxorpc.v1alpha.cardano.WitnessSet
	(*AuxData)(nil),                  // 11: utxorpc.v1alpha.cardano.AuxData
	(*Tx)(nil),                       // 12: utxorpc.v1alpha.cardano.Tx
	(*BlockHeader)(nil),              // 13: utxorpc.v1alpha.cardano.BlockHeader
	(*BlockBody)(nil),                // 14: utxorpc.v1alpha.cardano.BlockBody
	(*Block)(nil),                    // 15: utxorpc.v1alpha.cardano.Block
	(*VKeyWitness)(nil),              // 16: utxorpc.v1alpha.cardano.VKeyWitness
	(*NativeScript)(nil),             // 17: utxorpc.v1alpha.cardano.NativeScript
	(*NativeScriptList)(nil),         // 18: utxorpc.v1alpha.cardano.NativeScriptList
	(*ScriptNOfK)(nil),               // 19: utxorpc.v1alpha.cardano.ScriptNOfK
	(*Constr)(nil),                   // 20: utxorpc.v1alpha.cardano.Constr
	(*BigInt)(nil),                   // 21: utxorpc.v1alpha.cardano.BigInt
	(*PlutusDataPair)(nil),           // 22: utxorpc.v1alpha.cardano.PlutusDataPair
	(*PlutusData)(nil),               // 23: utxorpc.v1alpha.cardano.PlutusData
	(*PlutusDataMap)(nil),            // 24: utxorpc.v1alpha.cardano.PlutusDataMap
	(*PlutusDataArray)(nil),          // 25: utxorpc.v1alpha.cardano.PlutusDataArray
	(*Script)(nil),                   // 26: utxorpc.v1alpha.cardano.Script
	(*Metadatum)(nil),                // 27: utxorpc.v1alpha.cardano.Metadatum
	(*MetadatumArray)(nil),           // 28: utxorpc.v1alpha.cardano.MetadatumArray
	(*MetadatumMap)(nil),             // 29: utxorpc.v1alpha.cardano.MetadatumMap
	(*MetadatumPair)(nil),            // 30: utxorpc.v1alpha.cardano.MetadatumPair
	(*Metadata)(nil),                 // 31: utxorpc.v1alpha.cardano.Metadata
	(*StakeCredential)(nil),          // 32: utxorpc.v1alpha.cardano.StakeCredential
	(*RationalNumber)(nil),           // 33: utxorpc.v1alpha.cardano.RationalNumber
	(*Relay)(nil),                    // 34: utxorpc.v1alpha.cardano.Relay
	(*PoolMetadata)(nil),             // 35: utxorpc.v1alpha.cardano.PoolMetadata
	(*Certificate)(nil),              // 36: utxorpc.v1alpha.cardano.Certificate
	(*StakeDelegationCert)(nil),      // 37: utxorpc.v1alpha.cardano.StakeDelegationCert
	(*PoolRegistrationCert)(nil),     // 38: utxorpc.v1alpha.cardano.PoolRegistrationCert
	(*PoolRetirementCert)(nil),       // 39: utxorpc.v1alpha.cardano.PoolRetirementCert
	(*GenesisKeyDelegationCert)(nil), // 40: utxorpc.v1alpha.cardano.GenesisKeyDelegationCert
	(*MirTarget)(nil),                // 41: utxorpc.v1alpha.cardano.MirTarget
	(*MirCert)(nil),                  // 42: utxorpc.v1alpha.cardano.MirCert
	(*AddressPattern)(nil),           // 43: utxorpc.v1alpha.cardano.AddressPattern
	(*AssetPattern)(nil),             // 44: utxorpc.v1alpha.cardano.AssetPattern
	(*OutputPattern)(nil),            // 45: utxorpc.v1alpha.cardano.OutputPattern
	(*DatumPattern)(nil),             // 46: utxorpc.v1alpha.cardano.DatumPattern
	(*TxPattern)(nil),                // 47: utxorpc.v1alpha.cardano.TxPattern
}
var file_utxorpc_v1alpha_cardano_cardano_proto_depIdxs = []int32{
	0,  // 0: utxorpc.v1alpha.cardano.Redeemer.purpose:type_name -> utxorpc.v1alpha.cardano.RedeemerPurpose
	23, // 1: utxorpc.v1alpha.cardano.Redeemer.datum:type_name -> utxorpc.v1alpha.cardano.PlutusData
	4,  // 2: utxorpc.v1alpha.cardano.TxInput.as_output:type_name -> utxorpc.v1alpha.cardano.TxOutput
	2,  // 3: utxorpc.v1alpha.cardano.TxInput.redeemer:type_name -> utxorpc.v1alpha.cardano.Redeemer
	6,  // 4: utxorpc.v1alpha.cardano.TxOutput.assets:type_name -> utxorpc.v1alpha.cardano.Multiasset
	23, // 5: utxorpc.v1alpha.cardano.TxOutput.datum:type_name -> utxorpc.v1alpha.cardano.PlutusData
	26, // 6: utxorpc.v1alpha.cardano.TxOutput.script:type_name -> utxorpc.v1alpha.cardano.Script
	5,  // 7: utxorpc.v1alpha.cardano.Multiasset.assets:type_name -> utxorpc.v1alpha.cardano.Asset
	3,  // 8: utxorpc.v1alpha.cardano.Collateral.collateral:type_name -> utxorpc.v1alpha.cardano.TxInput
	4,  // 9: utxorpc.v1alpha.cardano.Collateral.collateral_return:type_name -> utxorpc.v1alpha.cardano.TxOutput
	16, // 10: utxorpc.v1alpha.cardano.WitnessSet.vkeywitness:type_name -> utxorpc.v1alpha.cardano.VKeyWitness
	26, // 11: utxorpc.v1alpha.cardano.WitnessSet.script:type_name -> utxorpc.v1alpha.cardano.Script
	23, // 12: utxorpc.v1alpha.cardano.WitnessSet.plutus_datums:type_name -> utxorpc.v1alpha.cardano.PlutusData
	31, // 13: utxorpc.v1alpha.cardano.AuxData.metadata:type_name -> utxorpc.v1alpha.cardano.Metadata
	26, // 14: utxorpc.v1alpha.cardano.AuxData.scripts:type_name -> utxorpc.v1alpha.cardano.Script
	3,  // 15: utxorpc.v1alpha.cardano.Tx.inputs:type_name -> utxorpc.v1alpha.cardano.TxInput
	4,  // 16: utxorpc.v1alpha.cardano.Tx.outputs:type_name -> utxorpc.v1alpha.cardano.TxOutput
	36, // 17: utxorpc.v1alpha.cardano.Tx.certificates:type_name -> utxorpc.v1alpha.cardano.Certificate
	9,  // 18: utxorpc.v1alpha.cardano.Tx.withdrawals:type_name -> utxorpc.v1alpha.cardano.Withdrawal
	6,  // 19: utxorpc.v1alpha.cardano.Tx.mint:type_name -> utxorpc.v1alpha.cardano.Multiasset
	3,  // 20: utxorpc.v1alpha.cardano.Tx.reference_inputs:type_name -> utxorpc.v1alpha.cardano.TxInput
	10, // 21: utxorpc.v1alpha.cardano.Tx.witnesses:type_name -> utxorpc.v1alpha.cardano.WitnessSet
	8,  // 22: utxorpc.v1alpha.cardano.Tx.collateral:type_name -> utxorpc.v1alpha.cardano.Collateral
	7,  // 23: utxorpc.v1alpha.cardano.Tx.validity:type_name -> utxorpc.v1alpha.cardano.TxValidity
	11, // 24: utxorpc.v1alpha.cardano.Tx.auxiliary:type_name -> utxorpc.v1alpha.cardano.AuxData
	12, // 25: utxorpc.v1alpha.cardano.BlockBody.tx:type_name -> utxorpc.v1alpha.cardano.Tx
	13, // 26: utxorpc.v1alpha.cardano.Block.header:type_name -> utxorpc.v1alpha.cardano.BlockHeader
	14, // 27: utxorpc.v1alpha.cardano.Block.body:type_name -> utxorpc.v1alpha.cardano.BlockBody
	18, // 28: utxorpc.v1alpha.cardano.NativeScript.script_all:type_name -> utxorpc.v1alpha.cardano.NativeScriptList
	18, // 29: utxorpc.v1alpha.cardano.NativeScript.script_any:type_name -> utxorpc.v1alpha.cardano.NativeScriptList
	19, // 30: utxorpc.v1alpha.cardano.NativeScript.script_n_of_k:type_name -> utxorpc.v1alpha.cardano.ScriptNOfK
	17, // 31: utxorpc.v1alpha.cardano.NativeScriptList.items:type_name -> utxorpc.v1alpha.cardano.NativeScript
	17, // 32: utxorpc.v1alpha.cardano.ScriptNOfK.scripts:type_name -> utxorpc.v1alpha.cardano.NativeScript
	23, // 33: utxorpc.v1alpha.cardano.Constr.fields:type_name -> utxorpc.v1alpha.cardano.PlutusData
	23, // 34: utxorpc.v1alpha.cardano.PlutusDataPair.key:type_name -> utxorpc.v1alpha.cardano.PlutusData
	23, // 35: utxorpc.v1alpha.cardano.PlutusDataPair.value:type_name -> utxorpc.v1alpha.cardano.PlutusData
	20, // 36: utxorpc.v1alpha.cardano.PlutusData.constr:type_name -> utxorpc.v1alpha.cardano.Constr
	24, // 37: utxorpc.v1alpha.cardano.PlutusData.map:type_name -> utxorpc.v1alpha.cardano.PlutusDataMap
	21, // 38: utxorpc.v1alpha.cardano.PlutusData.big_int:type_name -> utxorpc.v1alpha.cardano.BigInt
	25, // 39: utxorpc.v1alpha.cardano.PlutusData.array:type_name -> utxorpc.v1alpha.cardano.PlutusDataArray
	22, // 40: utxorpc.v1alpha.cardano.PlutusDataMap.pairs:type_name -> utxorpc.v1alpha.cardano.PlutusDataPair
	23, // 41: utxorpc.v1alpha.cardano.PlutusDataArray.items:type_name -> utxorpc.v1alpha.cardano.PlutusData
	17, // 42: utxorpc.v1alpha.cardano.Script.native:type_name -> utxorpc.v1alpha.cardano.NativeScript
	28, // 43: utxorpc.v1alpha.cardano.Metadatum.array:type_name -> utxorpc.v1alpha.cardano.MetadatumArray
	29, // 44: utxorpc.v1alpha.cardano.Metadatum.map:type_name -> utxorpc.v1alpha.cardano.MetadatumMap
	27, // 45: utxorpc.v1alpha.cardano.MetadatumArray.items:type_name -> utxorpc.v1alpha.cardano.Metadatum
	30, // 46: utxorpc.v1alpha.cardano.MetadatumMap.pairs:type_name -> utxorpc.v1alpha.cardano.MetadatumPair
	27, // 47: utxorpc.v1alpha.cardano.MetadatumPair.key:type_name -> utxorpc.v1alpha.cardano.Metadatum
	27, // 48: utxorpc.v1alpha.cardano.MetadatumPair.value:type_name -> utxorpc.v1alpha.cardano.Metadatum
	27, // 49: utxorpc.v1alpha.cardano.Metadata.value:type_name -> utxorpc.v1alpha.cardano.Metadatum
	32, // 50: utxorpc.v1alpha.cardano.Certificate.stake_registration:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	32, // 51: utxorpc.v1alpha.cardano.Certificate.stake_deregistration:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	37, // 52: utxorpc.v1alpha.cardano.Certificate.stake_delegation:type_name -> utxorpc.v1alpha.cardano.StakeDelegationCert
	38, // 53: utxorpc.v1alpha.cardano.Certificate.pool_registration:type_name -> utxorpc.v1alpha.cardano.PoolRegistrationCert
	39, // 54: utxorpc.v1alpha.cardano.Certificate.pool_retirement:type_name -> utxorpc.v1alpha.cardano.PoolRetirementCert
	40, // 55: utxorpc.v1alpha.cardano.Certificate.genesis_key_delegation:type_name -> utxorpc.v1alpha.cardano.GenesisKeyDelegationCert
	42, // 56: utxorpc.v1alpha.cardano.Certificate.mir_cert:type_name -> utxorpc.v1alpha.cardano.MirCert
	32, // 57: utxorpc.v1alpha.cardano.StakeDelegationCert.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	33, // 58: utxorpc.v1alpha.cardano.PoolRegistrationCert.margin:type_name -> utxorpc.v1alpha.cardano.RationalNumber
	34, // 59: utxorpc.v1alpha.cardano.PoolRegistrationCert.relays:type_name -> utxorpc.v1alpha.cardano.Relay
	35, // 60: utxorpc.v1alpha.cardano.PoolRegistrationCert.pool_metadata:type_name -> utxorpc.v1alpha.cardano.PoolMetadata
	32, // 61: utxorpc.v1alpha.cardano.MirTarget.stake_credential:type_name -> utxorpc.v1alpha.cardano.StakeCredential
	1,  // 62: utxorpc.v1alpha.cardano.MirCert.from:type_name -> utxorpc.v1alpha.cardano.MirSource
	41, // 63: utxorpc.v1alpha.cardano.MirCert.to:type_name -> utxorpc.v1alpha.cardano.MirTarget
	45, // 64: utxorpc.v1alpha.cardano.TxPattern.any_output:type_name -> utxorpc.v1alpha.cardano.OutputPattern
	43, // 65: utxorpc.v1alpha.cardano.TxPattern.any_address:type_name -> utxorpc.v1alpha.cardano.AddressPattern
	44, // 66: utxorpc.v1alpha.cardano.TxPattern.any_asset:type_name -> utxorpc.v1alpha.cardano.AssetPattern
	46, // 67: utxorpc.v1alpha.cardano.TxPattern.any_datum:type_name -> utxorpc.v1alpha.cardano.DatumPattern
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_utxorpc_v1alpha_cardano_cardano_proto_init() }
func file_utxorpc_v1alpha_cardano_cardano_proto_init() {
	if File_utxorpc_v1alpha_cardano_cardano_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redeemer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multiasset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxValidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collateral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WitnessSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuxData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VKeyWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeScriptList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptNOfK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlutusDataPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlutusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlutusDataMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlutusDataArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadatum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadatumArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadatumMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadatumPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RationalNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeDelegationCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolRegistrationCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolRetirementCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisKeyDelegationCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatumPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*NativeScript_ScriptPubkey)(nil),
		(*NativeScript_ScriptAll)(nil),
		(*NativeScript_ScriptAny)(nil),
		(*NativeScript_ScriptNOfK)(nil),
		(*NativeScript_InvalidBefore)(nil),
		(*NativeScript_InvalidHereafter)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*BigInt_Int)(nil),
		(*BigInt_BigUInt)(nil),
		(*BigInt_BigNInt)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*PlutusData_Constr)(nil),
		(*PlutusData_Map)(nil),
		(*PlutusData_BigInt)(nil),
		(*PlutusData_BoundedBytes)(nil),
		(*PlutusData_Array)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Script_Native)(nil),
		(*Script_PlutusV1)(nil),
		(*Script_PlutusV2)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Metadatum_Int)(nil),
		(*Metadatum_Bytes)(nil),
		(*Metadatum_Text)(nil),
		(*Metadatum_Array)(nil),
		(*Metadatum_Map)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*StakeCredential_AddrKeyHash)(nil),
		(*StakeCredential_ScriptHash)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Certificate_StakeRegistration)(nil),
		(*Certificate_StakeDeregistration)(nil),
		(*Certificate_StakeDelegation)(nil),
		(*Certificate_PoolRegistration)(nil),
		(*Certificate_PoolRetirement)(nil),
		(*Certificate_GenesisKeyDelegation)(nil),
		(*Certificate_MirCert)(nil),
	}
	file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*TxPattern_AnyOutput)(nil),
		(*TxPattern_AnyAddress)(nil),
		(*TxPattern_AnyAsset)(nil),
		(*TxPattern_AnyDatum)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_utxorpc_v1alpha_cardano_cardano_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_utxorpc_v1alpha_cardano_cardano_proto_goTypes,
		DependencyIndexes: file_utxorpc_v1alpha_cardano_cardano_proto_depIdxs,
		EnumInfos:         file_utxorpc_v1alpha_cardano_cardano_proto_enumTypes,
		MessageInfos:      file_utxorpc_v1alpha_cardano_cardano_proto_msgTypes,
	}.Build()
	File_utxorpc_v1alpha_cardano_cardano_proto = out.File
	file_utxorpc_v1alpha_cardano_cardano_proto_rawDesc = nil
	file_utxorpc_v1alpha_cardano_cardano_proto_goTypes = nil
	file_utxorpc_v1alpha_cardano_cardano_proto_depIdxs = nil
}
